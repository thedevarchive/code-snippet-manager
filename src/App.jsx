import { useState } from "react";
import SnippetForm from "./components/SnippetForm";
import SnippetList from "./components/SnippetList";
import { Button, IconButton } from "@mui/material";
import Brightness4Icon from '@mui/icons-material/Brightness4';
import Brightness7Icon from '@mui/icons-material/Brightness7';
import {
  atomDark,
  vs,
  vscDarkPlus,
  oneLight,
  oneDark,
  solarizedlight,
  solarizedDarkAtom,
  tomorrow
} from "react-syntax-highlighter/dist/esm/styles/prism";
import { github, githubGist } from "react-syntax-highlighter/dist/esm/styles/hljs";

// Project idea generated by ChatGPT and modified by Cursor
// https://chatgpt.com/share/67d3a2dc-7214-8000-b4e3-f67597b45c66
function App() {
  const [snippets, setSnippets] = useState([]);
  const [languages, setLanguages] = useState([]);
  const [isDarkMode, setIsDarkMode] = useState(true);
  const [theme, setTheme] = useState(atomDark);

  // simple functions to add snippets and languages and delete snippets to be included in the components 
  // add a snippet to the list
  const addSnippet = (snippet) => {
    setSnippets([...snippets, snippet]);
  };

  // delete a snippet from the list
  const deleteSnippet = (index) => {
    setSnippets(snippets.filter((_, i) => i !== index));
  };

  // add a language to the list
  const addLanguage = (newLang) => {
    setLanguages([...languages, newLang]);
  };

  // Theme options for syntax highlighting
  const darkThemeOptions = {
    'Atom Dark': atomDark,
    'GitHub Dark': githubGist,
    'One Dark': oneDark,
    'Solarized Dark': solarizedDarkAtom,
    'VS Code Dark': vscDarkPlus
  };

  const lightThemeOptions = {
    'GitHub': github,
    'One Light': oneLight,
    'Solarized Light': solarizedlight,
    'Tomorrow': tomorrow,
    'Visual Studio': vs
  };

  // Toggle dark/light mode
  const toggleMode = () => {
    setIsDarkMode(!isDarkMode);
    // Update theme to first available theme in new mode
    const newModeThemes = isDarkMode ? lightThemeOptions : darkThemeOptions;
    setTheme(Object.values(newModeThemes)[0]);
  };

  // Get current theme options based on mode
  const currentThemeOptions = isDarkMode ? darkThemeOptions : lightThemeOptions;

  return (
    <div className="App" style={{ 
      backgroundColor: isDarkMode ? '#282c34' : '#ffffff',
      minHeight: '100vh',
      color: isDarkMode ? '#ffffff' : '#000000'
    }}>
      <div className="App-header">
        <div style={{ width: "50%", margin: "auto", paddingTop: "20px" }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '10px' }}>
            <h2>Code Snippet Manager</h2>
            <IconButton onClick={toggleMode} color="inherit">
              {isDarkMode ? <Brightness7Icon /> : <Brightness4Icon />}
            </IconButton>
          </div>
          <p><em>Save your source code snippets in any programming language in one place</em></p>
          <div style={{ marginBottom: "20px" }}>
            <label htmlFor="themeSelect">Select Theme: &nbsp;</label>
            <select 
              value={Object.keys(currentThemeOptions).find(key => currentThemeOptions[key] === theme)}
              onChange={(e) => setTheme(currentThemeOptions[e.target.value])}
              style={{ 
                padding: "8px",
                borderRadius: "4px",
                backgroundColor: isDarkMode ? "#3b3b3b" : "#ffffff",
                border: "1px solid #ccc",
                color: isDarkMode ? "#ffffff" : "#333",
                width: "200px",
                fontSize: "16px"
              }}
            >
              {Object.keys(currentThemeOptions).map((themeName) => (
                <option key={themeName} value={themeName}>
                  {themeName}
                </option>
              ))}
            </select>
          </div>
          <SnippetForm onSave={addSnippet} languages={languages} onAddLanguage={addLanguage} isDarkMode={isDarkMode} />
          <div style={{ marginTop: "40px" }}>
            <SnippetList snippets={snippets} onDelete={deleteSnippet} theme={theme} isDarkMode={isDarkMode} />
          </div>
        </div>
      </div>
    </div>
  );
}

export default App;