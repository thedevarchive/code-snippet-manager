import { useState, useEffect } from "react";
import { BrowserRouter as Router, Routes, Route, NavLink } from "react-router-dom";
import { IconButton } from "@mui/material";
import Brightness4Icon from '@mui/icons-material/Brightness4';
import Brightness7Icon from '@mui/icons-material/Brightness7';
import {
  atomDark,
  vs,
  vscDarkPlus,
  oneLight,
  oneDark,
  solarizedlight,
  solarizedDarkAtom,
  tomorrow
} from "react-syntax-highlighter/dist/esm/styles/prism";
import { github, githubGist } from "react-syntax-highlighter/dist/esm/styles/hljs";
import { SnippetForm } from "./components/SnippetForm";
import { ViewSnippets } from "./pages/ViewSnippets";

// Project idea generated by ChatGPT and modified by Cursor
// https://chatgpt.com/share/67d3a2dc-7214-8000-b4e3-f67597b45c66
function App() {
  // states for adding snippets and languages
  const [snippets, setSnippets] = useState(() => {
    const storedSnippets = localStorage.getItem("snippets");
    return storedSnippets ? JSON.parse(storedSnippets) : [];
  });
  const [languages, setLanguages] = useState(() => {
    const storedLanguages = localStorage.getItem("languages");
    return storedLanguages ? JSON.parse(storedLanguages) : [];
  });

  // states for filtering snippets
  const [selectedCategory, setSelectedCategory] = useState("All");
  const [selectedLanguage, setSelectedLanguage] = useState("All");

  // states for setting theme of web app
  const [isDarkMode, setIsDarkMode] = useState(() => {
    const stored = localStorage.getItem("isDarkMode");
    return stored ? JSON.parse(stored) : true;
  });

  // Theme options for syntax highlighting
  const darkThemeOptions = {
    'Atom Dark': atomDark,
    'GitHub Dark': githubGist,
    'One Dark': oneDark,
    'Solarized Dark': solarizedDarkAtom,
    'VS Code Dark': vscDarkPlus
  };

  const lightThemeOptions = {
    'One Light': oneLight,
    'GitHub': github,
    'Solarized Light': solarizedlight,
    'Tomorrow': tomorrow,
    'Visual Studio': vs
  };

  // load theme previously set by user
  const [theme, setTheme] = useState(() => {
    const storedThemeName = localStorage.getItem("theme");
    if (storedThemeName) {
      const storedIsDarkMode = JSON.parse(localStorage.getItem("isDarkMode") ?? "true");
      const themeOptions = storedIsDarkMode ? darkThemeOptions : lightThemeOptions;
      return themeOptions[storedThemeName];
    }
    return atomDark;
  });

  // filter snippets based on selected category
  const filteredSnippets = snippets.filter((s) => {
    const categoryMatch = selectedCategory === "All" || s.category === selectedCategory;
    const languageMatch = selectedLanguage === "All" || s.language === selectedLanguage;
    return categoryMatch && languageMatch;
  });

  // simple functions to add snippets and languages and delete snippets to be included in the components 
  // add a snippet to the list
  const addSnippet = (snippet) => {
    console.log('Adding snippet:', snippet);
    setSnippets([...snippets, snippet]);
  };

  // update a snippet in the list
  const handleUpdateSnippet = (index, updatedSnippet) => {
    const newSnippets = [...snippets];
    newSnippets[index] = updatedSnippet;
    setSnippets(newSnippets);
  };

  // delete a snippet from the list
  const deleteSnippet = (index) => {
    setSnippets(snippets.filter((_, i) => i !== index));
  };

  // add a language to the list
  const addLanguage = (newLang) => {
    setLanguages([...languages, newLang]);
  };

  // Toggle dark/light mode
  const toggleMode = () => {
    setIsDarkMode(!isDarkMode);
    // Update theme to first available theme in new mode
    const newModeThemes = isDarkMode ? lightThemeOptions : darkThemeOptions;
    setTheme(Object.values(newModeThemes)[0]);
  };

  // Get current theme options based on mode
  const currentThemeOptions = isDarkMode ? darkThemeOptions : lightThemeOptions;

  // Save all state changes to localStorage
  useEffect(() => {
    localStorage.setItem("snippets", JSON.stringify(snippets));
    localStorage.setItem("languages", JSON.stringify(languages));
    localStorage.setItem("isDarkMode", JSON.stringify(isDarkMode));
    const themeName = Object.keys(currentThemeOptions).find(key => currentThemeOptions[key] === theme);
    localStorage.setItem("theme", themeName);
  }, [snippets, languages, isDarkMode, theme, currentThemeOptions]);

  return (
    <Router>
      <div className="App" style={{ 
        backgroundColor: isDarkMode ? '#282c34' : '#ffffff',
        color: isDarkMode ? '#ffffff' : '#000000',
        minHeight: '100vh',
        position: 'absolute',
        width: '100%',
        top: 0,
        left: 0
      }}>
        <div className="App-header">
          <div style={{ width: "50%", margin: "auto", paddingTop: "20px" }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '10px' }}>
              <h2>Code Snippet Manager</h2>
              <IconButton onClick={toggleMode} color="inherit">
                {isDarkMode ? <Brightness7Icon /> : <Brightness4Icon />}
              </IconButton>
            </div>
            <p style={{ marginBottom: "40px" }}><em>Save your source code snippets in any programming language in one place.</em></p>
            
            {/* Navigate between Add Snippet and Your Snippets */}
            <nav style={{ 
              marginTop: "20px", 
              marginBottom: "40px", 
              display: "flex", 
              gap: "100px",
              justifyContent: "center"
            }}>
              <NavLink 
                to="/" 
                style={({ isActive }) => ({ 
                  color: isDarkMode ? '#ffffff' : '#000000',
                  textDecoration: 'none',
                  fontSize: '1.1rem',
                  fontWeight: isActive ? 'bold' : 'normal',
                  borderBottom: isActive ? `2px solid ${isDarkMode ? '#ffffff' : '#000000'}` : '2px solid transparent',
                  paddingBottom: '3px',
                  transition: 'border-color 0.3s ease-in-out'
                })}
              >
                ADD SNIPPET
              </NavLink>
              <NavLink 
                to="/view" 
                style={({ isActive }) => ({ 
                  color: isDarkMode ? '#ffffff' : '#000000',
                  textDecoration: 'none',
                  fontSize: '1.1rem',
                  fontWeight: isActive ? 'bold' : 'normal',
                  borderBottom: isActive ? `2px solid ${isDarkMode ? '#ffffff' : '#000000'}` : '2px solid transparent',
                  paddingBottom: '3px',
                  transition: 'border-color 0.3s ease-in-out'
                })}
              >
                YOUR SNIPPETS
              </NavLink>
            </nav>

            <Routes>
              {/* only contains the SnippetForm component and props */}
              <Route 
                path="/" 
                element={
                  <SnippetForm 
                    onSave={addSnippet}
                    languages={languages}
                    onAddLanguage={addLanguage}
                    isDarkMode={isDarkMode}
                    theme={theme}
                  />
                } 
              />
              <Route 
                path="/view" 
                element={
                  <ViewSnippets 
                    snippets={snippets}
                    languages={languages}
                    onDelete={deleteSnippet}
                    onUpdate={handleUpdateSnippet}
                    isDarkMode={isDarkMode}
                    theme={theme}
                    selectedCategory={selectedCategory}
                    setSelectedCategory={setSelectedCategory}
                    selectedLanguage={selectedLanguage}
                    setSelectedLanguage={setSelectedLanguage}
                    filteredSnippets={filteredSnippets}
                    currentThemeOptions={currentThemeOptions}
                    setTheme={setTheme}
                  />
                } 
              />
            </Routes>
          </div>
        </div>
      </div>
    </Router>
  );
}

export default App;