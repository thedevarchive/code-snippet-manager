import { useState, useEffect, useRef } from "react";
import { BrowserRouter as Router, Routes, Route, NavLink } from "react-router-dom";
import {
  IconButton,
  Tooltip,
  useMediaQuery,
  Fab,
  AppBar,
  Toolbar,
  Typography,
  Button,
  FormControl,
  InputLabel,
  Drawer,
  Menu,
  MenuItem,
  Select,
  Box
} from "@mui/material";
import Brightness4Icon from '@mui/icons-material/Brightness4';
import Brightness7Icon from '@mui/icons-material/Brightness7';
import {
  atomDark,
  vs,
  vscDarkPlus,
  oneLight,
  oneDark,
  solarizedlight,
  solarizedDarkAtom,
  tomorrow
} from "react-syntax-highlighter/dist/esm/styles/prism";
import { github, githubGist } from "react-syntax-highlighter/dist/esm/styles/hljs";
import { SnippetForm } from "./components/SnippetForm";
import { ViewSnippets } from "./pages/ViewSnippets";
import ManageLanguages from "./pages/ManageLanguages";
import TranslateLanguages from "./pages/TranslateLanguages";
import { ThemeProvider, createTheme } from '@mui/material/styles';
import CssBaseline from '@mui/material/CssBaseline';
import CodeIcon from '@mui/icons-material/Code';
import MenuIcon from '@mui/icons-material/Menu';
import DownloadIcon from '@mui/icons-material/Download';
import UploadIcon from '@mui/icons-material/Upload';
import "./App.css";

// Theme options for syntax highlighting
const darkThemeOptions = {
  'Atom Dark': atomDark,
  'GitHub Dark': githubGist,
  'One Dark': oneDark,
  'Solarized Dark': solarizedDarkAtom,
  'VS Code Dark': vscDarkPlus
};

const lightThemeOptions = {
  'One Light': oneLight,
  'GitHub': github,
  'Solarized Light': solarizedlight,
  'Tomorrow': tomorrow,
  'Visual Studio': vs
};

// Project idea generated by ChatGPT and modified by Cursor
// https://chatgpt.com/share/67d3a2dc-7214-8000-b4e3-f67597b45c66
function App() {
  // states for adding snippets and languages
  const [snippets, setSnippets] = useState(() => {
    const storedSnippets = localStorage.getItem("snippets");
    return storedSnippets ? JSON.parse(storedSnippets) : [];
  });
  const [languages, setLanguages] = useState(() => {
    const storedLanguages = localStorage.getItem("languages");
    return storedLanguages ? JSON.parse(storedLanguages) : ["C#", "Java", "JavaScript", "Python", "HTML", "CSS", "MongoDB", "PostgreSQL", "React", "TypeScript"];
  });

  // states for filtering snippets
  const [selectedCategory, setSelectedCategory] = useState("All");
  const [selectedLanguage, setSelectedLanguage] = useState("All");

  //state for opening drawer in mobile 
  const [drawerOpen, setDrawerOpen] = useState(false);

  // states for setting theme of web app
  const [isDarkMode, setIsDarkMode] = useState(() => {
    const stored = localStorage.getItem("isDarkMode");
    return stored ? JSON.parse(stored) : true;
  });

  const [lightTheme, setLightTheme] = useState(() => {
    const stored = localStorage.getItem("lightTheme");
    return stored ? stored : "One Light";
  });
  const [darkTheme, setDarkTheme] = useState(() => {
    const stored = localStorage.getItem("darkTheme");
    return stored ? stored : "Atom Dark";
  });

  // load theme previously set by user
  const [theme, setTheme] = useState(() => {
    const themeOptions = isDarkMode ? darkThemeOptions : lightThemeOptions;
    const themeName = isDarkMode ? darkTheme : lightTheme;
    return themeOptions[themeName] || atomDark;
  });

  // filter snippets based on selected category
  const filteredSnippets = snippets.filter((s) => {
    const categoryMatch = selectedCategory === "All" || s.category === selectedCategory;
    const languageMatch = selectedLanguage === "All" || s.language === selectedLanguage;
    return categoryMatch && languageMatch;
  });

  // boolean value that checks if website is viewed using a mobile device 
  const isMobile = useMediaQuery("(max-width:600px)");

  //anchor for menu
  const [anchorEl, setAnchorEl] = useState(null);

  // handle opening menu in desktop screen
  const handleMenuOpen = (event) => {
    setAnchorEl(event.currentTarget);
  };

  //handle closing menu in desktop screen 
  const handleMenuClose = () => {
    setAnchorEl(null);
  };

  // simple functions to add snippets and languages and delete snippets to be included in the components 
  // add a snippet to the list
  const addSnippet = (snippet) => {
    console.log('Adding snippet:', snippet);
    setSnippets([...snippets, snippet]);
  };

  // update a snippet in the list
  const handleUpdateSnippet = (index, updatedSnippet) => {
    const newSnippets = [...snippets];
    newSnippets[index] = updatedSnippet;
    setSnippets(newSnippets);
  };

  // delete a snippet from the list
  const deleteSnippet = (index) => {
    setSnippets(snippets.filter((_, i) => i !== index));
  };

  // Download all snippets and languages into JSON file
  const downloadSnippets = (snippets, languages) => {
    const dataToSave = {
      snippets: snippets,  // Snippets array
      languages: languages, // Languages array
    };

    const json = JSON.stringify(dataToSave, null, 2); // Pretty print
    const blob = new Blob([json], { type: "application/json" });
    const url = URL.createObjectURL(blob);

    const link = document.createElement("a");
    link.href = url;
    link.download = "snippets.json";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  //ref for hidden file input 
  const fileInputRef = useRef(null);

  // Function to trigger the file input
  const handleFabClick = () => {
    fileInputRef.current.click();
  };

  // Function to handle file selection
  const handleFileChange = (event) => {
    const file = event.target.files[0];
    if (file) {
      loadFromFile(file); // Pass the file to the parent function
    }
  };

  // load snippets and languages from JSON file 
  const loadFromFile = (file) => {
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const parsedData = JSON.parse(e.target.result);
        if (parsedData.snippets && parsedData.languages) {
          setSnippets(parsedData.snippets);
          setLanguages(parsedData.languages);
        } else {
          alert("Invalid JSON format");
        }
      } catch (error) {
        alert("Error reading JSON file");
      }
    };
    reader.readAsText(file);
  };

  // add a language to the list
  const addLanguage = (newLang) => {
    setLanguages([...languages, newLang]);
  };

  // Toggle dark/light mode
  const toggleMode = () => {
    setIsDarkMode(!isDarkMode);
    // Update theme based on current theme name in the new mode
    const themeOptions = !isDarkMode ? darkThemeOptions : lightThemeOptions;
    const currentThemeName = isDarkMode ? lightTheme : darkTheme;
    setTheme(themeOptions[currentThemeName] || Object.values(themeOptions)[0]);
  };

  // Get current theme options based on mode
  const currentThemeOptions = isDarkMode ? darkThemeOptions : lightThemeOptions;

  // Save all state changes to localStorage
  useEffect(() => {
    localStorage.setItem("snippets", JSON.stringify(snippets));
    localStorage.setItem("languages", JSON.stringify(languages));
    localStorage.setItem("isDarkMode", JSON.stringify(isDarkMode));
    const themeName = Object.keys(currentThemeOptions).find(key => currentThemeOptions[key] === theme);
    localStorage.setItem("theme", themeName);
  }, [snippets, languages, isDarkMode, theme, currentThemeOptions]);

  // Load theme preferences from localStorage on initial render
  useEffect(() => {
    const savedLightTheme = localStorage.getItem('lightTheme');
    const savedDarkTheme = localStorage.getItem('darkTheme');
    const savedIsDarkMode = localStorage.getItem('isDarkMode') === 'true';

    if (savedLightTheme) setLightTheme(savedLightTheme);
    if (savedDarkTheme) setDarkTheme(savedDarkTheme);
    if (savedIsDarkMode !== null) setIsDarkMode(savedIsDarkMode);
  }, []);

  // Save theme preferences to localStorage whenever they change
  useEffect(() => {
    localStorage.setItem('lightTheme', lightTheme);
    localStorage.setItem('darkTheme', darkTheme);
    localStorage.setItem('isDarkMode', isDarkMode);
  }, [lightTheme, darkTheme, isDarkMode]);

  // Update theme when light/dark theme changes
  useEffect(() => {
    const themeOptions = isDarkMode ? darkThemeOptions : lightThemeOptions;
    const themeName = isDarkMode ? darkTheme : lightTheme;
    setTheme(themeOptions[themeName] || atomDark);
  }, [isDarkMode, lightTheme, darkTheme]);

  // set font and colour scheme for MUI components
  const muiTheme = createTheme({
    typography: {
      fontFamily: [
        'Source Sans Pro',
        '-apple-system',
        'BlinkMacSystemFont',
        '"Segoe UI"',
        'Roboto',
        '"Helvetica Neue"',
        'Arial',
        'sans-serif',
      ].join(','),
    },
    palette: {
      mode: isDarkMode ? 'dark' : 'light',
      background: {
        default: isDarkMode ? '#1a1a1a' : '#f5f5f5',
        paper: isDarkMode ? '#2d2d2d' : '#ffffff',
      },
      text: {
        primary: isDarkMode ? '#e2e8f0' : '#2d3748',
      },
    },
  });

  const handleUpdateLanguage = (oldLanguage, newLanguage) => {
    // Update language in snippets
    const updatedSnippets = snippets.map(snippet =>
      snippet.language === oldLanguage
        ? { ...snippet, language: newLanguage }
        : snippet
    );
    setSnippets(updatedSnippets);

    // Update language in languages list
    const updatedLanguages = languages.map(lang =>
      lang === oldLanguage ? newLanguage : lang
    );
    setLanguages(updatedLanguages);

    // Save to localStorage
    localStorage.setItem("snippets", JSON.stringify(updatedSnippets));
    localStorage.setItem("languages", JSON.stringify(updatedLanguages));
  };

  const handleDeleteLanguage = (languageToDelete) => {
    // Delete snippets with the language
    const updatedSnippets = snippets.filter(snippet => snippet.language !== languageToDelete);
    setSnippets(updatedSnippets);

    // Remove language from languages list
    const updatedLanguages = languages.filter(lang => lang !== languageToDelete);
    setLanguages(updatedLanguages);

    // Save to localStorage
    localStorage.setItem("snippets", JSON.stringify(updatedSnippets));
    localStorage.setItem("languages", JSON.stringify(updatedLanguages));
  };

  return (
    <ThemeProvider theme={muiTheme}>
      <CssBaseline />
      <Router>
        <div className="App" style={{
          backgroundColor: isDarkMode ? '#282c34' : '#f7f7f7',
          color: isDarkMode ? '#ffffff' : '#000000'
        }}>
          {/* AppBar component */}
          <AppBar className="appbar" position="static" sx={{ backgroundColor: isDarkMode ? '#2d2d2d' : '#e0e0e0' }}>
            <Toolbar className="toolbar">
              {
                /* Do not show subtitle when viewing website in mobile
                  Also show hamburger menu in mobile */
                isMobile ? (
                  <div className="outer-title-div">
                    <div className="inner-title-div">
                      <CodeIcon sx={{ fontSize: 32, color: isDarkMode ? '#e2e8f0' : '#2d3748', ml: "-10%", mr: "10px" }} />
                      <Typography variant="h6" component="div" sx={{ color: isDarkMode ? '#e2e8f0' : '#2d3748' }}>
                        Code Snippet Manager
                      </Typography>
                      <IconButton onClick={() => setDrawerOpen(true)} sx={{ color: isDarkMode ? '#e2e8f0' : '#2d3748', ml: "18%" }}>
                        <MenuIcon />
                      </IconButton>
                    </div>
                  </div>
                ) : (
                  <div className="outer-title-div">
                    <div className="inner-title-div">
                      <CodeIcon sx={{ fontSize: 32, color: isDarkMode ? '#e2e8f0' : '#2d3748', mr: 2, mt: 2.5 }} />
                      <Typography variant="h6" component="div" sx={{ color: isDarkMode ? '#e2e8f0' : '#2d3748' }}>
                        Code Snippet Manager
                      </Typography>
                    </div>
                    <Typography
                      variant="subtitle2"
                      sx={{
                        color: isDarkMode ? '#a0aec0' : '#4a5568',
                        ml: 6,
                        mt: -1.5,
                        fontStyle: 'italic',
                        pb: 1
                      }}
                    >
                      Save your source code snippets in any programming language in one place
                    </Typography>
                  </div>
                )
              }
              {/* Toggle dark/light mode */}
              {
                isMobile ? (
                  <Drawer anchor="top" open={drawerOpen} onClose={() => setDrawerOpen(false)}>
                    <FormControl className="theme-selector" size="small" sx={{ minWidth: 120, ml: 1, mr: 1, mt: 2 }}>
                      <InputLabel sx={{ color: isDarkMode ? '#a0aec0' : '#4a5568' }}>Theme</InputLabel>
                      <Select
                        value={isDarkMode ? darkTheme : lightTheme}
                        onChange={(e) => {
                          const newThemeName = e.target.value;
                          if (isDarkMode) {
                            setDarkTheme(newThemeName);
                          } else {
                            setLightTheme(newThemeName);
                          }
                        }}
                        label="Theme"
                        sx={{
                          color: isDarkMode ? '#e2e8f0' : '#2d3748',
                          '& .MuiOutlinedInput-notchedOutline': {
                            borderColor: isDarkMode ? '#4a5568' : '#cbd5e0',
                          },
                          '&:hover .MuiOutlinedInput-notchedOutline': {
                            borderColor: isDarkMode ? '#718096' : '#a0aec0',
                          },
                        }}
                      >
                        {Object.keys(isDarkMode ? darkThemeOptions : lightThemeOptions).map((themeName) => (
                          <MenuItem key={themeName} value={themeName}>
                            {themeName}
                          </MenuItem>
                        ))}
                      </Select>
                    </FormControl>
                    <Button className="nav-button" color="inherit" onClick={toggleMode} sx={{ color: isDarkMode ? '#e2e8f0' : '#2d3748', mt: 0.75 }}>
                      {isDarkMode ? "Switch to Light Mode" : "Switch to Dark Mode"}
                    </Button>
                    <Button className="nav-button" color="inherit" component={NavLink} to="/" sx={{ color: isDarkMode ? '#e2e8f0' : '#2d3748', mt: 0.75 }}>
                      View Snippets
                    </Button>
                    <Button className="nav-button" color="inherit" component={NavLink} to="/add" sx={{ color: isDarkMode ? '#e2e8f0' : '#2d3748', mt: 0.75 }}>
                      Add Snippet
                    </Button>
                    <Button className="nav-button" color="inherit" component={NavLink} to="/languages" sx={{ color: isDarkMode ? '#e2e8f0' : '#2d3748', mt: 0.75 }}>
                      Manage Languages
                    </Button>
                    <Button className="nav-button" color="inherit" component={NavLink} to="/translate" sx={{ color: isDarkMode ? '#e2e8f0' : '#2d3748', mt: 0.75 }}>
                      Translate Code
                    </Button>
                  </Drawer>
                ) : (
                  <>
                    <FormControl className="theme-selector" size="small" sx={{ minWidth: 120, mr: 2, mt: 0.75 }}>
                      <InputLabel sx={{ color: isDarkMode ? '#a0aec0' : '#4a5568' }}>Theme</InputLabel>
                      <Select
                        value={isDarkMode ? darkTheme : lightTheme}
                        onChange={(e) => {
                          const newThemeName = e.target.value;
                          if (isDarkMode) {
                            setDarkTheme(newThemeName);
                          } else {
                            setLightTheme(newThemeName);
                          }
                        }}
                        label="Theme"
                        sx={{
                          color: isDarkMode ? '#e2e8f0' : '#2d3748',
                          '& .MuiOutlinedInput-notchedOutline': {
                            borderColor: isDarkMode ? '#4a5568' : '#cbd5e0',
                          },
                          '&:hover .MuiOutlinedInput-notchedOutline': {
                            borderColor: isDarkMode ? '#718096' : '#a0aec0',
                          },
                        }}
                      >
                        {Object.keys(isDarkMode ? darkThemeOptions : lightThemeOptions).map((themeName) => (
                          <MenuItem key={themeName} value={themeName}>
                            {themeName}
                          </MenuItem>
                        ))}
                      </Select>
                    </FormControl>
                    <Tooltip title={isDarkMode ? "Switch to light mode" : "Switch to dark mode"}>
                      <IconButton
                        onClick={toggleMode}
                        sx={{
                          color: isDarkMode ? '#e2e8f0' : '#2d3748',
                          mt: 0.75,
                          '&:hover': {
                            backgroundColor: isDarkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)',
                          }
                        }}
                      >
                        {isDarkMode ? <Brightness7Icon /> : <Brightness4Icon />}
                      </IconButton>
                    </Tooltip>
                    <IconButton onClick={handleMenuOpen} sx={{ color: isDarkMode ? '#e2e8f0' : '#2d3748', mt: 0.75 }}>
                      <MenuIcon sx={{ fontSize: 30 }} />
                    </IconButton>
                    <Menu
                      anchorEl={anchorEl}
                      open={Boolean(anchorEl)}
                      onClose={handleMenuClose}
                    >
                      <MenuItem onClick={handleMenuClose}>
                        <Button className="nav-button" color="inherit" component={NavLink} to="/" sx={{ color: isDarkMode ? '#e2e8f0' : '#2d3748', mt: 0.75, '&:hover': { backgroundColor: 'transparent' } }}>
                          View Snippets
                        </Button>
                      </MenuItem>
                      <MenuItem onClick={handleMenuClose}>
                        <Button className="nav-button" color="inherit" component={NavLink} to="/add" sx={{ color: isDarkMode ? '#e2e8f0' : '#2d3748', mt: 0.75, '&:hover': { backgroundColor: 'transparent' } }}>
                          Add Snippet
                        </Button>
                      </MenuItem>
                      <MenuItem onClick={handleMenuClose}>
                        <Button className="nav-button" color="inherit" component={NavLink} to="/languages" sx={{ color: isDarkMode ? '#e2e8f0' : '#2d3748', mt: 0.75, '&:hover': { backgroundColor: 'transparent' } }}>
                          Manage Languages
                        </Button>
                      </MenuItem>
                      <MenuItem onClick={handleMenuClose}>
                        <Button className="nav-button" color="inherit" component={NavLink} to="/translate" sx={{ color: isDarkMode ? '#e2e8f0' : '#2d3748', mt: 0.75 }}>
                          Translate Code
                        </Button>
                      </MenuItem>
                    </Menu>
                  </>
                )
              }
            </Toolbar>
          </AppBar>
          {/* Routes for the different pages */}
          <div className="route-div">
            <Routes>
              <Route
                path="/"
                element={
                  <>
                    <Box className="view-snippets-header-box" sx={{
                      display: 'flex',
                      justifyContent: 'space-between',
                      alignItems: 'center',
                      mb: 1,
                      mt: 3
                    }}>
                      <h2>Your Snippets</h2>
                      {/* Buttons for downloading and uploading snippets
                            Located outside of the SnippetList to avoid the snippet filters that prevent app from downloading them */}
                      <div className="button-div">
                        {/* Button will be disabled when no snippets are on the list */}
                        <Tooltip title="Download Snippets">
                          <Fab
                            size="small"
                            onClick={() => downloadSnippets(snippets, languages)}
                            disabled={snippets.length === 0}
                            sx={{
                              backgroundColor: isDarkMode ? '#64B5F6' : '#2196F3',
                              color: '#ffffff',
                              '&:hover': {
                                backgroundColor: isDarkMode ? '#42A5F5' : '#1976D2',
                              }
                            }}
                          >
                            <DownloadIcon />
                          </Fab>
                        </Tooltip>
                        {/* When clicked, this Fab triggers hidden input file's upload function */}
                        <Tooltip title="Upload Snippets from JSON File">
                          <input
                            type="file"
                            ref={fileInputRef}
                            accept=".json"
                            onChange={handleFileChange}
                          />
                          <Fab
                            size="small"
                            onClick={handleFabClick}
                            sx={{
                              backgroundColor: isDarkMode ? '#455A64' : '#B0BEC5',
                              color: '#ffffff',
                              '&:hover': {
                                backgroundColor: isDarkMode ? '#546E7A' : '#90CAF9',
                              }
                            }}
                          >
                            <UploadIcon />
                          </Fab>
                        </Tooltip>
                      </div>
                    </Box>
                    <ViewSnippets
                      snippets={snippets}
                      languages={languages}
                      onDelete={deleteSnippet}
                      onUpdate={handleUpdateSnippet}
                      isDarkMode={isDarkMode}
                      theme={theme}
                      selectedCategory={selectedCategory}
                      setSelectedCategory={setSelectedCategory}
                      selectedLanguage={selectedLanguage}
                      setSelectedLanguage={setSelectedLanguage}
                      filteredSnippets={filteredSnippets}
                    />
                  </>
                }
              />
              {/* only contains the SnippetForm component and props */}
              <Route
                path="/add"
                element={
                  <>
                    <h2>Add Snippet</h2>
                    <SnippetForm
                      onSave={addSnippet}
                      languages={languages}
                      isDarkMode={isDarkMode}
                      theme={theme}
                    />
                  </>
                }
              />
              <Route
                path="/languages"
                element={
                  <ManageLanguages
                    languages={languages}
                    onUpdateLanguage={handleUpdateLanguage}
                    onDeleteLanguage={handleDeleteLanguage}
                    onAddLanguage={addLanguage}
                    isDarkMode={isDarkMode}
                  />
                }
              />
              <Route
                path="/translate"
                element={
                  <TranslateLanguages
                    languages={languages}
                    isDarkMode={isDarkMode}
                  />
                }
              />
            </Routes>
          </div>
        </div>
      </Router>
    </ThemeProvider>
  );
}

export default App;