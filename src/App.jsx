import { useState, useEffect } from "react";
import { BrowserRouter as Router, Routes, Route, NavLink } from "react-router-dom";
import { IconButton, Tooltip } from "@mui/material";
import Brightness4Icon from '@mui/icons-material/Brightness4';
import Brightness7Icon from '@mui/icons-material/Brightness7';
import {
  atomDark,
  vs,
  vscDarkPlus,
  oneLight,
  oneDark,
  solarizedlight,
  solarizedDarkAtom,
  tomorrow
} from "react-syntax-highlighter/dist/esm/styles/prism";
import { github, githubGist } from "react-syntax-highlighter/dist/esm/styles/hljs";
import { SnippetForm } from "./components/SnippetForm";
import { ViewSnippets } from "./pages/ViewSnippets";
import ManageLanguages from "./pages/ManageLanguages";
import { ThemeProvider, createTheme } from '@mui/material/styles';
import CssBaseline from '@mui/material/CssBaseline';
import { Prism as SyntaxHighlighter } from "react-syntax-highlighter";
import { AppBar, Toolbar, Typography, Button, FormControl, InputLabel, MenuItem, Select } from "@mui/material";
import CodeIcon from '@mui/icons-material/Code';

// Project idea generated by ChatGPT and modified by Cursor
// https://chatgpt.com/share/67d3a2dc-7214-8000-b4e3-f67597b45c66
function App() {
  // states for adding snippets and languages
  const [snippets, setSnippets] = useState(() => {
    const storedSnippets = localStorage.getItem("snippets");
    return storedSnippets ? JSON.parse(storedSnippets) : [];
  });
  const [languages, setLanguages] = useState(() => {
    const storedLanguages = localStorage.getItem("languages");
    return storedLanguages ? JSON.parse(storedLanguages) : [];
  });

  // states for filtering snippets
  const [selectedCategory, setSelectedCategory] = useState("All");
  const [selectedLanguage, setSelectedLanguage] = useState("All");

  // states for setting theme of web app
  const [isDarkMode, setIsDarkMode] = useState(() => {
    const stored = localStorage.getItem("isDarkMode");
    return stored ? JSON.parse(stored) : true;
  });
  
  const [lightTheme, setLightTheme] = useState(() => {
    const stored = localStorage.getItem("lightTheme");
    return stored ? stored : "One Light";
  });
  const [darkTheme, setDarkTheme] = useState(() => {
    const stored = localStorage.getItem("darkTheme");
    return stored ? stored : "Atom Dark";
  });

  // Theme options for syntax highlighting
  const darkThemeOptions = {
    'Atom Dark': atomDark,
    'GitHub Dark': githubGist,
    'One Dark': oneDark,
    'Solarized Dark': solarizedDarkAtom,
    'VS Code Dark': vscDarkPlus
  };

  const lightThemeOptions = {
    'One Light': oneLight,
    'GitHub': github,
    'Solarized Light': solarizedlight,
    'Tomorrow': tomorrow,
    'Visual Studio': vs
  };

  // load theme previously set by user
  const [theme, setTheme] = useState(() => {
    const themeOptions = isDarkMode ? darkThemeOptions : lightThemeOptions;
    const themeName = isDarkMode ? darkTheme : lightTheme;
    return themeOptions[themeName] || atomDark;
  });

  // filter snippets based on selected category
  const filteredSnippets = snippets.filter((s) => {
    const categoryMatch = selectedCategory === "All" || s.category === selectedCategory;
    const languageMatch = selectedLanguage === "All" || s.language === selectedLanguage;
    return categoryMatch && languageMatch;
  });

  // simple functions to add snippets and languages and delete snippets to be included in the components 
  // add a snippet to the list
  const addSnippet = (snippet) => {
    console.log('Adding snippet:', snippet);
    setSnippets([...snippets, snippet]);
  };

  // update a snippet in the list
  const handleUpdateSnippet = (index, updatedSnippet) => {
    const newSnippets = [...snippets];
    newSnippets[index] = updatedSnippet;
    setSnippets(newSnippets);
  };

  // delete a snippet from the list
  const deleteSnippet = (index) => {
    setSnippets(snippets.filter((_, i) => i !== index));
  };

  // add a language to the list
  const addLanguage = (newLang) => {
    setLanguages([...languages, newLang]);
  };

  // Toggle dark/light mode
  const toggleMode = () => {
    setIsDarkMode(!isDarkMode);
    // Update theme based on current theme name in the new mode
    const themeOptions = !isDarkMode ? darkThemeOptions : lightThemeOptions;
    const currentThemeName = isDarkMode ? lightTheme : darkTheme;
    setTheme(themeOptions[currentThemeName] || Object.values(themeOptions)[0]);
  };

  // Get current theme options based on mode
  const currentThemeOptions = isDarkMode ? darkThemeOptions : lightThemeOptions;

  // Save all state changes to localStorage
  useEffect(() => {
    localStorage.setItem("snippets", JSON.stringify(snippets));
    localStorage.setItem("languages", JSON.stringify(languages));
    localStorage.setItem("isDarkMode", JSON.stringify(isDarkMode));
    const themeName = Object.keys(currentThemeOptions).find(key => currentThemeOptions[key] === theme);
    localStorage.setItem("theme", themeName);
  }, [snippets, languages, isDarkMode, theme, currentThemeOptions]);

  // Load theme preferences from localStorage on initial render
  useEffect(() => {
    const savedLightTheme = localStorage.getItem('lightTheme');
    const savedDarkTheme = localStorage.getItem('darkTheme');
    const savedIsDarkMode = localStorage.getItem('isDarkMode') === 'true';

    if (savedLightTheme) setLightTheme(savedLightTheme);
    if (savedDarkTheme) setDarkTheme(savedDarkTheme);
    if (savedIsDarkMode !== null) setIsDarkMode(savedIsDarkMode);
  }, []);

  // Save theme preferences to localStorage whenever they change
  useEffect(() => {
    localStorage.setItem('lightTheme', lightTheme);
    localStorage.setItem('darkTheme', darkTheme);
    localStorage.setItem('isDarkMode', isDarkMode);
  }, [lightTheme, darkTheme, isDarkMode]);

  // Update theme when light/dark theme changes
  useEffect(() => {
    const themeOptions = isDarkMode ? darkThemeOptions : lightThemeOptions;
    const themeName = isDarkMode ? darkTheme : lightTheme;
    setTheme(themeOptions[themeName] || atomDark);
  }, [isDarkMode, lightTheme, darkTheme]);

  const muiTheme = createTheme({
    typography: {
      fontFamily: [
        'Source Sans Pro',
        '-apple-system',
        'BlinkMacSystemFont',
        '"Segoe UI"',
        'Roboto',
        '"Helvetica Neue"',
        'Arial',
        'sans-serif',
      ].join(','),
    },
    palette: {
      mode: isDarkMode ? 'dark' : 'light',
      background: {
        default: isDarkMode ? '#1a1a1a' : '#f5f5f5',
        paper: isDarkMode ? '#2d2d2d' : '#ffffff',
      },
      text: {
        primary: isDarkMode ? '#e2e8f0' : '#2d3748',
      },
    },
  });

  const handleUpdateLanguage = (oldLanguage, newLanguage) => {
    // Update language in snippets
    const updatedSnippets = snippets.map(snippet => 
      snippet.language === oldLanguage 
        ? { ...snippet, language: newLanguage }
        : snippet
    );
    setSnippets(updatedSnippets);

    // Update language in languages list
    const updatedLanguages = languages.map(lang => 
      lang === oldLanguage ? newLanguage : lang
    );
    setLanguages(updatedLanguages);

    // Save to localStorage
    localStorage.setItem("snippets", JSON.stringify(updatedSnippets));
    localStorage.setItem("languages", JSON.stringify(updatedLanguages));
  };

  const handleDeleteLanguage = (languageToDelete) => {
    // Delete snippets with the language
    const updatedSnippets = snippets.filter(snippet => snippet.language !== languageToDelete);
    setSnippets(updatedSnippets);

    // Remove language from languages list
    const updatedLanguages = languages.filter(lang => lang !== languageToDelete);
    setLanguages(updatedLanguages);

    // Save to localStorage
    localStorage.setItem("snippets", JSON.stringify(updatedSnippets));
    localStorage.setItem("languages", JSON.stringify(updatedLanguages));
  };

  return (
    <ThemeProvider theme={muiTheme}>
      <CssBaseline />
      <Router>
        <div className="App" style={{
          backgroundColor: isDarkMode ? '#282c34' : '#ffffff',
          color: isDarkMode ? '#ffffff' : '#000000',
          minHeight: '100vh',
          position: 'absolute',
          width: '100%',
          top: 0,
          left: 0
        }}>
          <AppBar position="static" sx={{ backgroundColor: isDarkMode ? '#2d2d2d' : '#ffffff', boxShadow: 'none' }}>
            <Toolbar>
              <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start', flexGrow: 1 }}>
                <div style={{ display: 'flex', alignItems: 'center' }}>
                  <CodeIcon sx={{ fontSize: 32, color: isDarkMode ? '#e2e8f0' : '#2d3748', mr: 2, mt: 2.5 }} />
                  <Typography variant="h6" component="div" sx={{ color: isDarkMode ? '#e2e8f0' : '#2d3748' }}>
                    Code Snippet Manager
                  </Typography>
                </div>
                <Typography
                  variant="subtitle2"
                  sx={{
                    color: isDarkMode ? '#a0aec0' : '#4a5568',
                    ml: 6,
                    mt: -1.5,
                    fontStyle: 'italic', 
                    pb: 1
                  }}
                >
                  Save your source code snippets in any programming language in one place
                </Typography>
              </div>
              <FormControl size="small" sx={{ minWidth: 120, mr: 2, mt: 0.75 }}>
                <InputLabel sx={{ color: isDarkMode ? '#a0aec0' : '#4a5568' }}>Theme</InputLabel>
                <Select
                  value={isDarkMode ? darkTheme : lightTheme}
                  onChange={(e) => {
                    const newThemeName = e.target.value;
                    if (isDarkMode) {
                      setDarkTheme(newThemeName);
                    } else {
                      setLightTheme(newThemeName);
                    }
                  }}
                  label="Theme"
                  sx={{
                    color: isDarkMode ? '#e2e8f0' : '#2d3748',
                    '& .MuiOutlinedInput-notchedOutline': {
                      borderColor: isDarkMode ? '#4a5568' : '#cbd5e0',
                    },
                    '&:hover .MuiOutlinedInput-notchedOutline': {
                      borderColor: isDarkMode ? '#718096' : '#a0aec0',
                    },
                  }}
                >
                  {Object.keys(isDarkMode ? darkThemeOptions : lightThemeOptions).map((themeName) => (
                    <MenuItem key={themeName} value={themeName}>
                      {themeName}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
              <Tooltip title={isDarkMode ? "Switch to light mode" : "Switch to dark mode"}>
                <IconButton
                  onClick={toggleMode}
                  sx={{
                    color: isDarkMode ? '#e2e8f0' : '#2d3748',
                    mt: 0.75,
                    '&:hover': {
                      backgroundColor: isDarkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)',
                    }
                  }}
                >
                  {isDarkMode ? <Brightness7Icon /> : <Brightness4Icon />}
                </IconButton>
              </Tooltip>
              <Button color="inherit" component={NavLink} to="/" sx={{ color: isDarkMode ? '#e2e8f0' : '#2d3748', mt: 0.75 }}>
                View Snippets
              </Button>
              <Button color="inherit" component={NavLink} to="/add" sx={{ color: isDarkMode ? '#e2e8f0' : '#2d3748', mt: 0.75 }}>
                Add Snippet
              </Button>
              <Button color="inherit" component={NavLink} to="/languages" sx={{ color: isDarkMode ? '#e2e8f0' : '#2d3748', mt: 0.75 }}>
                Manage Languages
              </Button>
            </Toolbar>
          </AppBar>
          <div className="App-header">
            <div style={{ width: "50%", margin: "auto", paddingTop: "20px" }}>
              <Routes>
                <Route
                  path="/"
                  element={
                    <ViewSnippets
                      snippets={snippets}
                      languages={languages}
                      onDelete={deleteSnippet}
                      onUpdate={handleUpdateSnippet}
                      isDarkMode={isDarkMode}
                      theme={theme}
                      selectedCategory={selectedCategory}
                      setSelectedCategory={setSelectedCategory}
                      selectedLanguage={selectedLanguage}
                      setSelectedLanguage={setSelectedLanguage}
                      filteredSnippets={filteredSnippets}
                    />
                  }
                />
                {/* only contains the SnippetForm component and props */}
                <Route
                  path="/add"
                  element={
                    <>
                      <h2>Add Snippet</h2>
                      <SnippetForm
                        onSave={addSnippet}
                        languages={languages}
                        isDarkMode={isDarkMode}
                        theme={theme}
                      />
                    </>
                  }
                />
                <Route
                  path="/languages"
                  element={
                    <ManageLanguages
                      languages={languages}
                      onUpdateLanguage={handleUpdateLanguage}
                      onDeleteLanguage={handleDeleteLanguage}
                      onAddLanguage={addLanguage}
                      isDarkMode={isDarkMode}
                    />
                  }
                />
              </Routes>
            </div>
          </div>
        </div>
      </Router>
    </ThemeProvider>
  );
}

export default App;